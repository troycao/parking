package com.troy.parking.common.utils;import org.springframework.util.StringUtils;import java.lang.reflect.Field;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.List;/** * @ClassName: ReflectUtil * @Description: 反射工具类 */public class ReflectUtil {    /**     * 根据实体类拼接签名字段     * 非空字母顺序 key=value&key2=value2     * @param obj     * @return     */    public static String GetSignParams(Object obj) {        //字段        List<Field> fieldList = getFieldList(obj);        if (fieldList == null && fieldList.size() < 1) {            return null;        }        //参数拼接        StringBuffer sb = new StringBuffer();        for (int i = 0; i < fieldList.size(); i++) {            Field f = fieldList.get(i);            f.setAccessible(true);            try {                Object value = f.get(obj);                //不包含空值                if (!StringUtils.isEmpty(value)) {                    sb.append(f.getName() + "=");                    sb.append(value + "&");                }            } catch (IllegalAccessException e) {                e.printStackTrace();            }        }        return sb.toString().substring(0, sb.length() - 1);    }    /**     * 根据实体类拼接签名字段     * 非空字母顺序 key=value&key2=value2     * @param obj  实体类     * @param name 不需要拼接的字段名称     * @return     */    public static String GetSignParams(Object obj, String name) {        //字段        List<Field> fieldList = getFieldList(obj);        if (fieldList == null && fieldList.size() < 1) {            return null;        }        //参数拼接        StringBuffer sb = new StringBuffer();        for (int i = 0; i < fieldList.size(); i++) {            Field f = fieldList.get(i);            f.setAccessible(true);            try {                Object value = f.get(obj);                //非空且非特定字段名                if (!StringUtils.isEmpty(value)) {                    String fieldName = f.getName();                    if (!fieldName.equals(name)) {                        sb.append(fieldName + "=");                        sb.append(value + "&");                    }                }            } catch (IllegalAccessException e) {                e.printStackTrace();            }        }        return sb.toString().substring(0, sb.length() - 1);    }    /**     * 获取对象字段信息(字母顺序排序)     * @param obj     * @return     */    public static List<Field> getFieldList(Object obj) {        List<Field> fieldList = new ArrayList<>();        Class tempClass = obj.getClass();        //当父类为null的时候说明到达了最上层的父类(Object类).        while (tempClass != null) {            fieldList.addAll(Arrays.asList(tempClass.getDeclaredFields()));            //得到父类,然后赋给自己            tempClass = tempClass.getSuperclass();        }        if (fieldList == null) {            return null;        }        //属性名自然排序        //Collections.sort(fieldList, new Comparator<Field>() {        //    @Override        //    public int compare(Field o1, Field o2) {        //        return o1.getName().compareTo(o2.getName());        //    }        //});        //使用匿名的内部类排序        Collections.sort(fieldList, (Field o1, Field o2) -> (o1.getName().compareTo(o2.getName())));        return fieldList;    }}